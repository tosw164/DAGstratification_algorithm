from operator import itemgetter

def findFirstInstanceOf(n, list_to_search):
    print(n,"in",list_to_search)

    if isinstance(n, list):
        n = n[0]

    for value in list_to_search:
        if isinstance(value, list):
            if n in value:
                # a()
                return list_to_search.index(value)

    if n in list_to_search:
        # a()
        return list_to_search.index(n)

    # a()
    return float('Inf')

def asdf():
    while True:
        return


a = 0
b = [0, 2, 3, 1]
print(findFirstInstanceOf(a, b))

# print([1, 3, 2].so)
print(sorted(b, key=int))

c = [[24], [31], [21], [25], [11], [41, 34, 23], [12, 22]]
d = [[24], [3], [21], [25], [11], [41, 34, 23], [12, 22]]

c = [sorted(x, key=int) for x in c]
print(sorted(c,key=lambda x: x[0]))

print(sorted([sorted(x, key=int) for x in d], key=lambda x: x[0]))

e = [1, 2, 3, 4, 1, 2]
for i in e:
    print(i)

f = [[25], [23, 34, 41], [23, 34, 41], [23, 34, 41]]
print(sorted([sorted(x, key=int) for x in f], key=lambda x: x[0]))

# print([1,2] in [1, [2,3]])
# x = 0
# print(x==False)
# print(asdf())
#
# a = 1
# print([a])
# print([str(a)])


# import collections
# def flatten(x):
#     if isinstance(x, collections.Iterable):
#         return [a for i in x for a in flatten(i)]
#     else:
#         return [x]
#
# def findFirstInstanceOf(n, list_to_search):
#     for value in list_to_search:
#         if isinstance(value, list):
#             if n in value:
#                 return list_to_search.index(value)
#
#     if n in list_to_search:
#         print('a')
#         return list_to_search.index(n)
#
#     return False
#
# node = '1'
# tolook = ['1', '2']
# print(findFirstInstanceOf(node, tolook))
# print(tolook.index(node))
#
# a = [1,2 ,3]
# print(a)
# a.pop()
# print(a)
#
# b = [1, [2, 3]]
# print(b.index([2,3]))
#
# print([2,3] in b)
#
# l = [[[2,3],3],[5,[[6,7],3]],9,[3,[4,[5]]]]
# print(flatten(l))
#
# x = [1, 2, 3]
# print(x)
# for i in range(len(x)):
#     x[i] = str(x[i])
# print(x)